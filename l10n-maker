#!/usr/bin/perl
use strict;
use warnings;
use Cwd;
use File::Spec;
use File::Find;
use Getopt::Long;
use Pod::Usage;
use Encode;
use vars qw( $MT_HOME );
use vars qw(
    $verbose   $help       $component       $output
    $language  $translated $steal_from_core $format
    $new_only  $footprint  $no_unused       $debug
    $update    $backup
);

$footprint = 1;
$backup    = 1;

GetOptions(
    help                 => \$help,
    verbose              => \$verbose,
    'component:s'        => \$component,
    'output:s'           => \$output,
    'language:s'         => \$language,
    'translated:s'       => \$translated,
    'steal-from-core'    => \$steal_from_core,
    'format:s'           => \$format,
    'new-phrases-only|n' => \$new_only,
    'footprint!'         => \$footprint,
    'no-unused'          => \$no_unused,
    debug                => \$debug,
    update               => \$update,
    'backup!'            => \$backup,
);

if ( $help ) {
    pod2usage({
        -verbose => 2,
        -exitval => 0,
        -output  => \*STDERR,
    });
}

## Initialize MT
my $cwd = cwd();
$MT_HOME = $ENV{MT_HOME} ||= $cwd;

print STDERR "    CWD: $cwd\n" if $debug;
print STDERR "MT_HOME: $MT_HOME\n" if $debug;

unshift @INC, File::Spec->catdir( $MT_HOME, 'lib' );
unshift @INC, File::Spec->catdir( $MT_HOME, 'extlib' );

require MT;
die "Can't load MT" if $@;
my $mt = MT->new;

## Default settings
$format ||= q{ %s => %s,};
$component ||= 'core';

## Get Options from TRANS_RECIPE.yaml
my $recipe;
if ( -e 'TRANS_RECIPE.yaml' ) {
    require MT::Util::YAML;
    $recipe = MT::Util::YAML::LoadFile('TRANS_RECIPE.yaml');
}

my %mode_for_filetype = (
    cgi  => 'perl',
    pm   => 'perl',
    pl   => 'perl',
    yaml => 'config',
    tmpl => 'mtml',
    mtml => 'mtml',
    js   => 'js',
);

my %rule_for_mode = (
    perl   => \&fetch_perl,
    config => \&fetch_config,
    mtml   => \&fetch_mtml,
    js     => \&fetch_js,
);

sub run {
    ## Making list of files who possibly has a line need to translate.
    my @target_dirs = scalar @ARGV ? @ARGV
                    : $component   ? component_targets($component)
                    :                ($cwd)
                    ;
    if ( $debug ) {
        printf STDERR "Search path: %s\n", $_ for @target_dirs;
    }
    my %other_component_path;
    if ( $component eq 'core' ) {
        require MT::Component;
        %other_component_path
            = map { $_->path => 1 }
              grep { $_->id ne lc $component }
              MT::Component->select;
    }
    my @targets = target_files( \@target_dirs, \%other_component_path );
    if ( $component eq 'core' ) {
        push @targets, map { File::Spec->catfile( $cwd, $_ ) } <*.cgi>;
    }

    @targets = sort { $a cmp $b } @targets;

    ## Get current lexicon.
    my $existing_lexicon = {};
    my $l10n_class;
    my $core_lexicon = {};
    if ( $translated ) {
        require $translated;
        $language = $translated;
        $language =~ s!^lib/MT/L10N/!!;
        $language =~ s!\.pm$!!;
    }
    else {
        die "at lease one of translated file or language option are required\n"
            unless $language;
    }

    {
        no strict 'refs';
        $l10n_class = 'MT::L10N::' . $language;
        $core_lexicon = { %{$l10n_class . '::Lexicon'} };
    }

    if ( $translated ) {
        $existing_lexicon = $core_lexicon;
        $component = 'core';
    }
    elsif ( $component ) {
        my $c = MT->component(lc $component);
        $l10n_class = $c->l10n_class . "::$language";
        eval "require $l10n_class";
        if (!$@ ) {
            no strict 'refs';
            $existing_lexicon = { %{ $l10n_class . '::Lexicon' } };
            warn "Use base lexicon from $l10n_class" if $verbose;
        }
        else {
            die "failed to load base lexicon from $l10n_class";
        }
    }
    else {
        my $l10n_file;
        find(
            sub {
                my $name = $File::Find::name;
                if ( $name =~ /L10N\/$language\.pm$/ && $name !~ /\.svn/ ) {
                    $l10n_file = $File::Find::name;
                }
            }, $cwd );
        if ( $l10n_file ) {
            ## FIXME: in this block, looks doing require for same module twice...
            eval "require '$l10n_file'";
            if ( !$@ ) {
                $l10n_file =~ s/$cwd//;
                my @l10n_path = File::Spec->splitdir($l10n_file);
                while ( scalar @l10n_path && ! $l10n_path[0] ) { shift @l10n_path };
                if ( $l10n_path[0] eq 'plugins' ) {
                    # no need plugins/Foo/lib
                    shift @l10n_path;
                    shift @l10n_path;
                    shift @l10n_path;
                }
                elsif ( $l10n_path[0] eq 'lib' ) {
                    shift @l10n_path;
                }
                $l10n_path[-1] =~ s/\.pm$//;
                $l10n_class = join '::', @l10n_path;
                eval "require $l10n_class";
                if ( !$@ ) {
                    no strict 'refs';
                    $existing_lexicon = { %{ $l10n_class . '::Lexicon' } };
                    warn "Use base lexicon from $l10n_class" if $verbose;
                }
                else {
                    die "Failed to load lexicon from $l10n_class: $@";
                }
            }
            else {
                die "Failed to load $l10n_file: $@";
            }
        }
        else {
            warn "l10n file is not yet exists" if $verbose;
        }
    }
    if ( $update && !$l10n_class ) {
        die "Cannot detect original l10n module to update.";
    }

    for my $val ( values %$existing_lexicon ) {
        $val = Encode::decode_utf8($val) if !Encode::is_utf8($val);
    }

    ## Fetch phrases from those files.
    my @out;
    my ( $new );
    my %used_phrase;
    for my $target ( @targets ) {
        my @this_out = make_lexicon_from_file(
                          $target,
                          core_lexicon     => $core_lexicon,
                          existing_lexicon => $existing_lexicon,
                          used_phrase      => \%used_phrase,
                       );
        if ( scalar @this_out ) {
            my $target_rel = File::Spec->abs2rel($target, $cwd);
            $new += scalar grep { $_ =~ /Translate - New$/ } @this_out;
            push @out, ( '' ) if $footprint;
            push @out, "## $target_rel" if $footprint;
            push @out, @this_out;
        }
    }

    ## Make lines from unused phrases.
    my @unused_phrases = grep { !$used_phrase{$_} } keys %$existing_lexicon;
    if ( scalar @unused_phrases && !$no_unused ) {
        @unused_phrases = sort { $a cmp $b } @unused_phrases;
        push @out, ( '' );
        push @out, "## Unused?";
        for my $phrase ( @unused_phrases ) {
            my $out = make_line(
                          $phrase,
                          existing_lexicon => $existing_lexicon,
                          ignore_existing  => 0 );
            push @out, $out if $out;
        }
    }

    ## Making output
    my $res = join "\n", @out;
    if ( $update ) {
        $l10n_class =~ s!::!/!g;
        my $filepath = $INC{ $l10n_class . '.pm' };
        print STDERR "Update l10n file $filepath.\n" if $verbose;
        my $start = qr{\n\%Lexicon \= \(\n};
        my $end   = qr{\n\)\;\n};
        require MT::FileMgr;
        my $fmgr = MT::FileMgr->new('Local');
        my $text = $fmgr->get_data($filepath);
        if ( $backup ) {
            require MT::Util;
            my $ts = MT::Util::epoch2ts(undef, time() );
            my $bu_path = $filepath . '.' . $ts;
            $fmgr->put_data($text, $bu_path, 'output') or die $fmgr->errstr;
        }
        my (@reg) = $text =~ s{($start).*($end)}{$1$res$2}msx;
        $res = $text;
        $output = $filepath;
    }
    if ( $output ) {
        require MT::FileMgr;
        my $fmgr = MT::FileMgr->new('Local');
        $fmgr->put_data($res, $output, 'output') or die $fmgr->errstr;
    }
    else {
        print Encode::encode_utf8($res);
    }
    printf STDERR "got %i new phrease to translate!\n", $new;
    printf STDERR "existing %i phrases are not used\n", scalar @unused_phrases;
}


sub make_lexicon_from_file {
    my ( $filepath, %opts ) = @_;
    warn "fetch phrases from $filepath" if $verbose;
    my $core_lexicon     = $opts{core_lexicon} || {};
    my $existing_lexicon = $opts{existing_lexicon} || {};
    my $used_phrase      = $opts{used_phrase} || {};
    my ($suffix) = $filepath =~ /\.(\w+)$/ or return;
    my $mode = $mode_for_filetype{ $suffix } or return;

    require MT::FileMgr;
    my $fmgr = MT::FileMgr->new('Local');
    my $text = $fmgr->get_data($filepath, 'upload');
    $text = Encode::decode_utf8($text);
    my %phrase = $rule_for_mode{$mode}->(
        $text,
        filepath         => $filepath,
        core_lexicon     => $core_lexicon,
        existing_lexicon => $existing_lexicon,
        used_phrase      => $used_phrase,
        ignore_existing  => $new_only,
    ) or return;
    my @phrases = keys %phrase;
    @phrases = sort { $a cmp $b } @phrases;
    my @this_out;
    for my $phrase ( @phrases ) {
        my $out = make_line(
                      $phrase,
                      core_lexicon     => $core_lexicon,
                      existing_lexicon => $existing_lexicon,
                      used_phrase      => $used_phrase,
                      ignore_existing  => $new_only,
                  );
        if ( $out ) {
            push @this_out, $out;
        }
    }
    @this_out;
}

sub make_line {
    my ( $phrase, %opts ) = @_;
    my $core_lexicon     = $opts{core_lexicon} || {};
    my $existing_lexicon = $opts{existing_lexicon} || {};
    my $used_phrase      = $opts{used_phrase} || {};
    my $ignore_existing  = $opts{ignore_existing};
    return if $used_phrase->{$phrase};
    $used_phrase->{$phrase} = 1;

    my $trans = '';
    my ($qp, $qt) = qw( ' ' );
    if ($phrase =~ /\\n/) {
        $qp = '"';
    }
    if ($phrase =~ /[^\\]'/ && $phrase !~ /[^\\]"/) {
        $qp = '"';
    }

    my $reason;
    if ( exists $existing_lexicon->{$phrase} ) {
        return if $ignore_existing;
        $trans = $existing_lexicon->{$phrase};
    }
    elsif ( exists $core_lexicon->{$phrase} && $component ne 'core' ) {
         if ( !$steal_from_core ) {
             return;
         }
         $trans = $core_lexicon->{$phrase};
         $reason = "From Core";
    }
    if ($trans =~ /\\n/) {
        $qt = '"';
    }
    if ($trans =~ /[^\\]'/ && $trans !~ /[^\\]"/) {
        $qt = '"';
    }

    $reason = "New" if !$trans;

    ## Escape good for perl code.
    $phrase =~ s/([^\\]?)'/$1\\'/g if $qp eq "'";
    $phrase =~ s/([^\\]?)"/$1\\"/g if $qp eq '"';
    my $out = sprintf $format, "$qp$phrase$qp", "$qt$trans$qt";
    $out .= " # Translate - $reason" if $reason;
    $out;
}

sub component_targets {
    my ($component_id) = @_;
    my $component = MT->component( lc $component_id )
        or die "Failed to load component $component_id";
    my $path = $component->path;
    if ( $component_id eq 'core' ) {
        my @dirs = qw(
            lib       tmpl       php                search_templates
            default_templates    mt-static/jquery   mt-static/js
        );
        return map { File::Spec->catdir( $path, $_ ) } @dirs;
    }
    else {
        my $static = File::Spec->catdir( MT->config->StaticFilePath,
            'plugins', $component_id );
        return ( $path, ( -d $static ? ($static) : () ), );
    }
}

sub target_files {
    my ( $rootdirs, $ignore_path_hash ) = @_;
    my @files;
    my $files;
    find(
        sub {
            die 'Too many files. May be you run script in bad directory '
                if 100000 < $files++;
            my $name = $File::Find::name;
            for my $key ( keys %$ignore_path_hash ) {
                return if $name =~ /$key/;
            }
            return if $name =~ /L10N\/\w*\.pm/;
            return if $name =~ /\.svn/;
            return if $name =~ /\.git/;
            return if $name =~ /TRANS_RECIPE/;
            push @files, $name;
        }, @$rootdirs);
    return @files;
}

sub fetch_perl {
    my ($text) = @_;
    return unless $text;
    my %phrase;
    while ($text =~ /(?:translate|errtrans|trans_error|trans|translate_escape|maketext)\s*\(((?:\s*(?:"(?:[^"\\]+|\\.)*"|'(?:[^'\\]+|\\.)*')\s*\.?\s*){1,})[,\)]/gs) {
        my $p = $1;
        my $phrase;
        while ($p =~ /"((?:[^"\\]+|\\.)*)"|'((?:[^'\\]+|\\.)*)'/gs) {
            $phrase .= ($1 || $2 || '');
        }
        ## merge multi lined string by concat.
        ## for example:
        ##     translate(
        ##         'foo'
        ##         . ' and bar' );
        ## should be a single phrase 'foo and bar'.
        $phrase =~ s/['"]\s*.\s*\n\s*['"]//gs;
        $phrase =~ s/['"]\s*\n\s*.\s*['"]//gs;

        $phrase{$phrase} = 1;
    }
    while ($text =~ /\s*(?:["'])?label(?:["'])?\s*=>\s*(["'])(.*?)([^\\])\1/gs) { 
        $phrase{$2.$3} = 1;

    }

    return ( %phrase, fetch_mtml($text) );
}

sub fetch_config {
    my ($text, %opts) = @_;
    return unless $text;
    require MT::Util::YAML;
    my %target_key = (
        label => 1,
    );
    if ( $text =~ m/^##TRANS_KEYS:\s*(.*)/ ) {
        my $keys = $1;
        %target_key = map { $_ => 1 } split /\s/, $keys;
    }
    if ( $opts{filepath} ) {
        my ( undef, undef, $file ) = File::Spec->splitpath( $opts{filepath} );
        if ( $recipe && $recipe->{files}->{$file} ) {
             my $keys = $recipe->{files}->{$file}->{trans_keys};
             %target_key = ( %target_key, map { $_ => 1 } @$keys );
         }
    }
    my %phrase;
    my $config = MT::Util::YAML::Load($text);
    my $explorer;
    $explorer = sub {
        my ( $key, $value ) = @_;
        if ( !ref $value ) {
            if ( $key && $target_key{$key} ) {
                $phrase{$value} = 1;
            }
            elsif ( ( $value || '' ) =~ m/^\s*sub\s*\{/s ) {
                %phrase = ( %phrase, fetch_perl($value) );
            }
            %phrase = ( %phrase, fetch_mtml($value) );
        }
        elsif ( 'HASH' eq ref $value ) {
            for my $k ( keys %$value ) {
                $explorer->($k, $value->{$k});
            }
        }
        elsif ( 'ARRAY' eq ref $value ) {
            for my $val ( @$value ) {
                $explorer->(undef, $val);
            }
        }
    };
    $explorer->(undef, $config);
    %phrase;
}

sub fetch_mtml {
    my ($text) = @_;
    return unless $text;
    my %phrase;
    while ($text =~ m!(<(?:_|MT)_TRANS(?:\s+((?:\w+)\s*=\s*(["'])(?:<[^>]+?>|[^\3]+?)*?\3))+?\s*/?>)!igm) {
        my($msg, %args) = ($1);
        while ($msg =~ /\b(\w+)\s*=\s*(["'])((?:<[^>]+?>|[^\2])*?)?\2/g) {  #'
            $args{$1} = $3;
        }
        my $phrase = $args{phrase} or next;
        $phrase{$phrase} = 1;
    }
    return %phrase;
}

sub fetch_js {
    my ($text) = @_;
    return unless $text;
    my %phrase;
    while ($text =~ m!(?:trans|raise)\s*\(\s*(?:"((?:[^"\\]+|\\.)*)"|'((?:[^'\\]+|\\.)*)')!igm) {
        $phrase{ $1 || $2 } = 1;
    }
    return %phrase;
}

## here we go!
run();

=pod

=head1 NAME

l10n-maker - Translate dictionary generator for Movable Type.

=head1 DESCRIPTION

this script generates and updates translate dictyonary from source codes of
Movable Type and it's plugins.

=head1 SYNOPSIS

$ l10nmaker --langeuae=LANGTAG [ options.. ] [ dir... ]

=head1 OPTIONS

=over 4

=item * component

specify the component name to make translate file.

=item * translated

specify the l10n file that already exists

=item * laguage

langtag of target language of translating

=item * steal-from-core ( optional )

if it's true, and the phrase was found in MT core translate dictionary, include
it to the new lexicon.

=item * format ( optional )

output format

=item * new-phrases-only ( optional )

output unknown phrases only

=item * footprint ( optional: default is true )

flag to print comment that says which file the phrases come from. if you don't
like it, --no-footprint to stop it.

=item * no-unused ( optional )

by default, script outputs the phrases that already translated but can't find
in the source codes, at the end of lexicon. if this option is enabled, stop that.

=item * update ( optional )

overwrite an existing L10N file by the new dictionary.

=item * backup ( optional: default is true )

if update option is enabled, script make a backup file of orignail dictionary.
you can use --no-backup option if you want to stop making back up.

=item * output ( optional )

specify the output file to generate.
if no output file was passed, script prints out the dictionary to STDOUT.

=item * verbose ( optional )

prints the details what this script is doing to STDERR.

=item * help

display this help.

=back

=head1 HOW_TO_USE

=head2 Building Core Dictionary

When you want to update MT's core L10N files, go to MT's Home directory, then
run this script with component option set to 'core'.

    $ l10n-maker --language ja --component core

=head2 Building Installed Plugin's Dictionary

When you want to update a plugin's L10N files that are already installed
( as bundled StyleCatcher plugin ), go to MT's Home directory, then
run this script with component option set to the Plugin name.

    $ l10n-maker --language ja --component StyleCatcher

=head2 Building Stand Alone Plugin's Dictionary

When you want to update a stand alone plugin ( something like just cloned
from GitHub ), at first, set an excutable MT's path to the environment
variable 'MT_HOME', then go to the plugin's root directory and run l10n_maker.
l10n-maker scans all files under the current directory.

    $ l10n-maker --language ja

=cut
